import fs from "fs-extra";
import path from "path";
import { logger } from "./logger";

/**
 * Ensures all required template files exist
 */
export async function ensureTemplates(): Promise<void> {
  const templatesDir = path.resolve(__dirname, "..", "..", "templates");
  const frameworks = ["react", "next", "vite", "remix"];

  for (const framework of frameworks) {
    const frameworkDir = path.join(templatesDir, "init", framework);
    await fs.ensureDir(frameworkDir);

    // Create template.json if it doesn't exist
    const templateJsonPath = path.join(frameworkDir, "template.json");
    if (!(await fs.pathExists(templateJsonPath))) {
      await fs.writeJson(
        templateJsonPath,
        {
          files: [
            { source: "package.json.template", target: "package.json" },
            { source: "vite.config.ts.template", target: "vite.config.ts" },
            {
              source: "tailwind.config.js.template",
              target: "tailwind.config.js",
            },
            {
              source: "src/styles/main.css.template",
              target: "src/styles/main.css",
            },
            { source: "src/App.tsx.template", target: "src/App.tsx" },
            { source: "src/main.tsx.template", target: "src/main.tsx" },
            {
              source: "src/utilities/classNames.ts.template",
              target: "src/utilities/classNames.ts",
            },
            {
              source: "src/utilities/index.ts.template",
              target: "src/utilities/index.ts",
            },
          ],
        },
        { spaces: 2 }
      );
      logger.debug(`Created template definition: ${templateJsonPath}`);
    }

    // Create required template files with placeholders
    const filesToCreate = [
      "package.json.template",
      "vite.config.ts.template",
      "tailwind.config.js.template",
      "src/styles/main.css.template",
      "src/App.tsx.template",
      "src/main.tsx.template",
      "src/utilities/classNames.ts.template",
      "src/utilities/index.ts.template",
    ];
    for (const relPath of filesToCreate) {
      const filePath = path.join(frameworkDir, relPath);
      await fs.ensureDir(path.dirname(filePath));
      if (!(await fs.pathExists(filePath))) {
        // Create more meaningful placeholder content based on file type
        let templateContent = '';
        
        if (relPath.endsWith('package.json.template')) {
          templateContent = JSON.stringify({
            name: "{{ projectName }}",
            version: "0.1.0",
            private: true,
            scripts: {
              "dev": "vite",
              "build": "vite build",
              "preview": "vite preview"
            },
            dependencies: {
              "react": "^18.2.0",
              "react-dom": "^18.2.0"
            },
            devDependencies: {
              "@types/react": "^18.2.25",
              "@types/react-dom": "^18.2.11",
              "tailwindcss": "^4.0.0-alpha.3",
              "typescript": "^5.3.3",
              "vite": "^5.0.10"
            }
          }, null, 2);
        } else if (relPath.endsWith('.css.template')) {
          templateContent = `@tailwind base;
@tailwind components;
@tailwind utilities;

/* Add your custom CSS below */
`;
        } else if (relPath.endsWith('.tsx.template') || relPath.endsWith('.ts.template')) {
          templateContent = `// ${path.basename(relPath)}
// Generated by Vindsmidi CLI
`;
          
          if (relPath.includes('classNames')) {
            templateContent += `
/**
 * Combines multiple class names into a single string
 */
export function cn(...classes: (string | undefined | null | false)[]): string {
  return classes.filter(Boolean).join(' ');
}
`;
          } else if (relPath.includes('App.tsx')) {
            templateContent += `
import React from 'react';
import './styles/main.css';

function App() {
  return (
    <div className="p-4">
      <h1 className="text-xl font-bold">Welcome to Vindsmidi UI</h1>
      <p>Edit this component to get started!</p>
    </div>
  );
}

export default App;
`;
          }
        } else if (relPath.endsWith('tailwind.config.js.template')) {
          templateContent = `/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
`;
        } else {
          templateContent = `// Placeholder for ${relPath}`;
        }
        
        await fs.writeFile(filePath, templateContent);
        logger.debug(`Created template: ${filePath}`);
      }
    }
  }
}
